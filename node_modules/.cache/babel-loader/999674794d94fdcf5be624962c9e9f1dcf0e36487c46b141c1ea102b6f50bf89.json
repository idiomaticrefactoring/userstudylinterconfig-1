{"ast":null,"code":"import \"core-js/modules/web.timers.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.json.stringify.js\";\nimport \"core-js/modules/es.function.name.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport ReportTuple from './ReportTuple.vue';\nimport { saveAs } from 'file-saver';\nexport default {\n  name: \"Report\",\n  components: {\n    ReportTuple: ReportTuple\n  },\n  data: function data() {\n    return {\n      questionIndex: 0,\n      minutes: 10,\n      seconds: 0,\n      tupleIndex: 1,\n      ableEdit: true,\n      answers: [],\n      finalStoredData: {},\n      questions: [{\n        title: \"For the following Java Coding Standard, generate configurations based on the following Linter Configurations\",\n        detail: \"<b> Java Coding Standard:</b>\\n \\\r\n  No static import for classes:\\n \\\r\n  Static import is not used for static nested classes. They are imported with normal imports.\\n \\\r\n\\n \\\r\n<b>Linter Configurations:</b><p><a href=\\\"https://checkstyle.sourceforge.io/checks.html\\\"> Right Click the link and then Click 'Open Link in New Tab' to See All Linter rules!</a></p>\",\n        references: \"<b>Configuration Reference:</b>\\n \\\r\nNone\"\n      }, {\n        title: \"For the following Java Coding Standard, generate configurations based on the following Linter Configurations\",\n        detail: \"<b> Java Coding Standard:</b>\\n \\\r\nUse of optional braces:\\n \\\r\nBraces are used with `if` , `else` , `for` , `do` and `while` statements, even when the body is empty or contains only a single statement. \\n \\\r\nOther optional braces, such as those in a lambda expression, remain optional. \\n \\\r\n\\n \\\r\n<b>Linter Configurations:</b><p><a href=\\\"https://checkstyle.sourceforge.io/checks.html\\\"> Right Click the link and then Click 'Open Link in New Tab' to See All Linter rules!</a></p>\",\n        references: \"<b>Configuration Reference:</b>\\n \\\r\n&ltmodule name=\\\"NeedBraces\\\"&gt\\n \\\r\n&ltproperty name=\\\"allowEmptyLoopBody\\\" value=\\\"false\\\"/&gt\\n \\\r\n&ltproperty name=\\\"allowSingleLineStatement\\\" value=\\\"false\\\"/&gt\\n \\\r\n&ltproperty name=\\\"tokens\\\" value=\\\"LITERAL_DO, LITERAL_ELSE, LITERAL_FOR, LITERAL_IF, LITERAL_WHILE\\\"/&gt\\n \\\r\n&lt/module&gt\"\n      }, {\n        title: \"For the following Java Coding Standard, generate configurations based on the following Linter Configurations\",\n        detail: \"<b> Java Coding Standard:</b>\\n \\\r\nBlock tags:\\n \\\r\nAny of the standard \\\"block tags\\\" that are used appear in the order `@param` , `@return` , `@throws` , `@deprecated` , and these four types never appear with an empty description. When a block tag doesn't fit on a single line, continuation lines are indented four (or more) spaces from the position of the `@` .\\\r\n\\n \\\r\n<b>Linter Configurations:</b><p><a href=\\\"https://checkstyle.sourceforge.io/checks.html\\\"> Right Click the link and then Click 'Open Link in New Tab' to See All Linter rules!</a></p>\",\n        references: \"<b>Configuration Reference:</b>\\n \\\r\n&ltmodule name=\\\"AtclauseOrder\\\"&gt\\n \\\r\n  &ltproperty name=\\\"id\\\" value=\\\"atclause_order\\\"/&gt\\n \\\r\n  &ltproperty name=\\\"tagOrder\\\" value=\\\"@param, @return, @throws, @deprecated\\\"/&gt\\n \\\r\n&lt/module&gt\\n \\\r\n&ltmodule name=\\\"NonEmptyAtclauseDescription\\\"&gt\\n \\\r\n  &ltproperty name=\\\"javadocTokens\\\" value=\\\"PARAM_LITERAL, RETURN_LITERAL, THROWS_LITERAL, DEPRECATED_LITERAL\\\"/&gt\\n \\\r\n&lt/module&gt\\n \\\r\n&ltmodule name=\\\"JavadocTagContinuationIndentation\\\"&gt\\n \\\r\n  &ltproperty name=\\\"offset\\\" value=\\\"4\\\"/&gt\\n \\\r\n&lt/module&gt\"\n      }, {\n        title: \"For the following Java Coding Standard, generate configurations based on the following Linter Configurations\",\n        detail: \"<b> Java Coding Standard:</b>\\n \\\r\nVertical Whitespace:\\n \\\r\nA single blank line always appears:\\n \\\r\nBetween consecutive members or initializers of a class: fields, constructors, methods, nested classes, static initializers, and instance initializers.\\n \\\r\nException: A blank line between two consecutive fields (having no other code between them) is optional. Such blank lines are used as needed to create logical groupings of fields.\\n \\\r\nA single blank line may also appear anywhere it improves readability, for example between statements to organize the code into logical subsections. A blank line before the first member or initializer, or after the last member or initializer of the class, is neither encouraged nor discouraged.\\n \\\r\nMultiple consecutive blank lines are permitted, but never required (or encouraged).\\n \\\r\n\\n \\\r\n<b>Linter Configurations:</b><p><a href=\\\"https://checkstyle.sourceforge.io/checks.html\\\"> Right Click the link and then Click 'Open Link in New Tab' to See All Linter rules!</a></p>\",\n        references: \"<b>Configuration Reference:</b>\\n \\\r\n&ltmodule name=\\\"EmptyLineSeparator\\\"&gt\\n \\\r\n  &ltproperty name=\\\"allowMultipleEmptyLines\\\" value=\\\"true\\\"/&gt\\n \\\r\n  &ltproperty name=\\\"allowNoEmptyLineBetweenFields\\\" value=\\\"true\\\"/&gt\\n \\\r\n  &ltproperty name=\\\"tokens\\\" value=\\\"VARIABLE_DEF, CTOR_DEF, METHOD_DEF, CLASS_DEF, STATIC_INIT, INSTANCE_INIT\\\"/&gt\\n \\\r\n  &lt/module&gt\"\n      }, {\n        title: \"For the following Java Coding Standard, generate configurations based on the following Linter Configurations\",\n        detail: \"<b> Empty blocks: may be concise:</b>\\n \\\r\n  No static import for classes:\\n \\\r\n  An empty block or block-like construct may be in K & R style. Alternatively, it may be closed immediately after it is opened, with no characters or line break in between ( `{}` ), unless it is part of a multi-block statement (one that directly contains multiple blocks: `if/else` or `try/catch/finally` ).\\n \\\r\nExamples:\\n \\\r\n  // This is acceptable\\n \\\r\n  void doNothing() {}\\n \\\r\n\u000b\\\r\n  // This is equally acceptable\\n \\\r\n  void doNothingElse() {\\n \\\r\n  }\\n \\\r\n\\n \\\r\n<b>Linter Configurations:</b><p><a href=\\\"https://checkstyle.sourceforge.io/checks.html\\\"> Right Click the link and then Click 'Open Link in New Tab' to See All Linter rules!</a></p>\",\n        references: \"<b>Configuration Reference:</b>\\n \\\r\nNone\"\n      }, {\n        title: \"For the following Java Coding Standard, generate configurations based on the following Linter Configurations\",\n        detail: \"<b> Block indentation: +2 spaces:</b>\\n \\\r\nEach time a new block or block-like construct is opened, the indent increases by two spaces. When the block ends, the indent returns to the previous indent level. The indent level applies to both code and comments throughout the block. \\n \\\r\n\\n \\\r\n<b>Linter Configurations:</b><p><a href=\\\"https://checkstyle.sourceforge.io/checks.html\\\"> Right Click the link and then Click 'Open Link in New Tab' to See All Linter rules!</a></p>\",\n        references: \"<b>Configuration Reference:</b>\\n \\\r\n&ltmodule name=\\\"Indentation\\\"&gt\\n \\\r\n  &ltproperty name=\\\"basicOffset\\\" value=\\\"2\\\"/&gt\\n \\\r\n&lt/module&gt\\n \\\r\n&ltmodule name=\\\"CommentsIndentation\\\"&gt\\n \\\r\n  &ltproperty name=\\\"tokens\\\" value=\\\"SINGLE_LINE_COMMENT, BLOCK_COMMENT_BEGIN\\\"/&gt\\n \\\r\n&lt/module&gt\"\n      }]\n    };\n  },\n  created: function created() {\n    this.createAnswer(this.tupleIndex);\n  },\n  computed: {\n    question: function question() {\n      return this.questions[this.questionIndex];\n    }\n  },\n  methods: {\n    startTimer: function startTimer() {\n      var _this = this;\n      setInterval(function () {\n        if (_this.seconds > 0) {\n          _this.seconds--;\n        } else if (_this.minutes > 0) {\n          _this.minutes--;\n          _this.seconds = 59;\n        } else {\n          // Time is up\n          _this.ableEdit = false;\n        }\n      }, 1000);\n    },\n    addQuestion: function addQuestion() {\n      // Code to add a new question\n      this.tupleIndex += 1;\n      this.createAnswer(this.tupleIndex);\n    },\n    createAnswer: function createAnswer(index) {\n      var answer = {\n        'tuple_id': index\n      };\n      this.answers.push(answer);\n    },\n    resetParameters: function resetParameters() {\n      this.minutes = 10;\n      this.seconds = 0;\n      this.tupleIndex = 1;\n      this.ableEdit = true;\n      this.answers = [];\n      this.$refs['reportTuples_1'][0].resetParameters();\n      this.createAnswer(this.tupleIndex);\n    },\n    nextQuestion: function nextQuestion() {\n      console.log(this.$refs);\n      for (var i = 0; i < this.tupleIndex; i++) {\n        this.answers[i]['selectedOption'] = this.$refs['reportTuples_' + (i + 1)][0].selectedOption;\n        this.answers[i]['reason'] = this.$refs['reportTuples_' + (i + 1)][0].reason;\n        this.answers[i]['references'] = this.$refs['reportTuples_' + (i + 1)][0].references;\n      }\n      console.log(this.answers);\n      this.finalStoredData['answers_' + (this.questionIndex + 1)] = {\n        'answers': this.answers,\n        'min': 4 - this.minutes,\n        'sec': 60 - this.seconds\n      };\n      if (this.questionIndex < 23) {\n        this.questionIndex += 1;\n        this.resetParameters();\n      } else {\n        this.saveAsJSON();\n        this.$router.push('/thanks');\n      }\n    },\n    saveAsJSON: function saveAsJSON() {\n      var data = JSON.stringify(this.finalStoredData, null, 2);\n      var filename = this.$route.params.name + '.json';\n      var blob = new Blob([data], {\n        type: 'text/plain;charset=utf-8'\n      });\n      saveAs(blob, filename);\n    }\n  },\n  mounted: function mounted() {\n    this.startTimer();\n  }\n};","map":{"version":3,"names":["ReportTuple","saveAs","name","components","data","questionIndex","minutes","seconds","tupleIndex","ableEdit","answers","finalStoredData","questions","title","detail","references","created","createAnswer","computed","question","methods","startTimer","_this","setInterval","addQuestion","index","answer","push","resetParameters","$refs","nextQuestion","console","log","i","selectedOption","reason","saveAsJSON","$router","JSON","stringify","filename","$route","params","blob","Blob","type","mounted"],"sources":["src/components/Report.vue"],"sourcesContent":["<template>\r\n  <div class=\"container1\">\r\n    <div class=\"question-header\">\r\n      <h2>{{ `Question ${questionIndex + 1}:` }}</h2>\r\n      <div class=\"timer\">{{ `Time: ${minutes}:${seconds}` }}</div>\r\n    </div>\r\n    <div class=\"container2\">\r\n      <p class=\"question-title\" v-html=\"question.title\"></p>\r\n<!--      <p class=\"question-references\" v-html=\"question.references\" style=\"display:block;\"></p>-->\r\n<!--      <p>References:</p>-->\r\n  <div class=\"question-detail\" v-html=\"question.detail\" style=\"display:block; white-space:pre-wrap\">\r\n  </div>\r\n      <p class=\"question-note\">Note: Identify all configurations for the coding standard. A coding standard may have <b>none, one, or multiple</b> corresponding configurations. If you believe there are no matched configurations, write \"<b>None</b>\". <b style=\"color: red; font-size: 1rem;\" >The 'Configuration Reference' section provides configurations for your reference.</b></p>\r\n<!--<p>References:</p>-->\r\n\r\n  <code class=\"question-references\" v-html=\"question.references\" style=\"display:block; white-space:pre-wrap\">\r\n  </code>\r\n\r\n      <div v-for=\"index in tupleIndex\" >\r\n        <ReportTuple :question=\"question\" :able-edit=\"ableEdit\" :key=\"index\" :name=\"index\" :ref=\"'reportTuples_'+index\"/>\r\n        <hr>\r\n      </div>\r\n<!--      <button @click=\"addQuestion\" :disabled=\"!ableEdit\">+</button>-->\r\n    </div>\r\n    <div class=\"container3\">\r\n      <button @click=\"nextQuestion\" class=\"next-button\">Next</button>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport ReportTuple from './ReportTuple.vue'\r\nimport { saveAs } from 'file-saver';\r\n\r\nexport default {\r\n  name: \"Report\",\r\n  components: {\r\n    ReportTuple\r\n  },\r\n  data() {\r\n    return {\r\n      questionIndex: 0,\r\n      minutes: 10,\r\n      seconds: 0,\r\n      tupleIndex: 1,\r\n      ableEdit: true,\r\n      answers: [],\r\n      finalStoredData:{},\r\n      questions: [\r\n      {\r\ntitle: \"For the following Java Coding Standard, generate configurations based on the following Linter Configurations\",\r\ndetail:\"<b> Java Coding Standard:</b>\\n \\\r\n  No static import for classes:\\n \\\r\n  Static import is not used for static nested classes. They are imported with normal imports.\\n \\\r\n\\n \\\r\n<b>Linter Configurations:</b><p><a href=\\\"https://checkstyle.sourceforge.io/checks.html\\\"> Right Click the link and then Click 'Open Link in New Tab' to See All Linter rules!</a></p>\",\r\nreferences:\"<b>Configuration Reference:</b>\\n \\\r\nNone\"\r\n        },\r\n           {\r\ntitle: \"For the following Java Coding Standard, generate configurations based on the following Linter Configurations\",\r\ndetail:\"<b> Java Coding Standard:</b>\\n \\\r\nUse of optional braces:\\n \\\r\nBraces are used with `if` , `else` , `for` , `do` and `while` statements, even when the body is empty or contains only a single statement. \\n \\\r\nOther optional braces, such as those in a lambda expression, remain optional. \\n \\\r\n\\n \\\r\n<b>Linter Configurations:</b><p><a href=\\\"https://checkstyle.sourceforge.io/checks.html\\\"> Right Click the link and then Click 'Open Link in New Tab' to See All Linter rules!</a></p>\",\r\nreferences:\"<b>Configuration Reference:</b>\\n \\\r\n&ltmodule name=\\\"NeedBraces\\\"&gt\\n \\\r\n&ltproperty name=\\\"allowEmptyLoopBody\\\" value=\\\"false\\\"/&gt\\n \\\r\n&ltproperty name=\\\"allowSingleLineStatement\\\" value=\\\"false\\\"/&gt\\n \\\r\n&ltproperty name=\\\"tokens\\\" value=\\\"LITERAL_DO, LITERAL_ELSE, LITERAL_FOR, LITERAL_IF, LITERAL_WHILE\\\"/&gt\\n \\\r\n&lt/module&gt\"\r\n        },\r\n          {\r\ntitle: \"For the following Java Coding Standard, generate configurations based on the following Linter Configurations\",\r\ndetail:\"<b> Java Coding Standard:</b>\\n \\\r\nBlock tags:\\n \\\r\nAny of the standard \\\"block tags\\\" that are used appear in the order `@param` , `@return` , `@throws` , `@deprecated` , and these four types never appear with an empty description. When a block tag doesn't fit on a single line, continuation lines are indented four (or more) spaces from the position of the `@` .\\\r\n\\n \\\r\n<b>Linter Configurations:</b><p><a href=\\\"https://checkstyle.sourceforge.io/checks.html\\\"> Right Click the link and then Click 'Open Link in New Tab' to See All Linter rules!</a></p>\",\r\nreferences:\"<b>Configuration Reference:</b>\\n \\\r\n&ltmodule name=\\\"AtclauseOrder\\\"&gt\\n \\\r\n  &ltproperty name=\\\"id\\\" value=\\\"atclause_order\\\"/&gt\\n \\\r\n  &ltproperty name=\\\"tagOrder\\\" value=\\\"@param, @return, @throws, @deprecated\\\"/&gt\\n \\\r\n&lt/module&gt\\n \\\r\n&ltmodule name=\\\"NonEmptyAtclauseDescription\\\"&gt\\n \\\r\n  &ltproperty name=\\\"javadocTokens\\\" value=\\\"PARAM_LITERAL, RETURN_LITERAL, THROWS_LITERAL, DEPRECATED_LITERAL\\\"/&gt\\n \\\r\n&lt/module&gt\\n \\\r\n&ltmodule name=\\\"JavadocTagContinuationIndentation\\\"&gt\\n \\\r\n  &ltproperty name=\\\"offset\\\" value=\\\"4\\\"/&gt\\n \\\r\n&lt/module&gt\"\r\n        },\r\n          {\r\ntitle: \"For the following Java Coding Standard, generate configurations based on the following Linter Configurations\",\r\ndetail:\"<b> Java Coding Standard:</b>\\n \\\r\nVertical Whitespace:\\n \\\r\nA single blank line always appears:\\n \\\r\nBetween consecutive members or initializers of a class: fields, constructors, methods, nested classes, static initializers, and instance initializers.\\n \\\r\nException: A blank line between two consecutive fields (having no other code between them) is optional. Such blank lines are used as needed to create logical groupings of fields.\\n \\\r\nA single blank line may also appear anywhere it improves readability, for example between statements to organize the code into logical subsections. A blank line before the first member or initializer, or after the last member or initializer of the class, is neither encouraged nor discouraged.\\n \\\r\nMultiple consecutive blank lines are permitted, but never required (or encouraged).\\n \\\r\n\\n \\\r\n<b>Linter Configurations:</b><p><a href=\\\"https://checkstyle.sourceforge.io/checks.html\\\"> Right Click the link and then Click 'Open Link in New Tab' to See All Linter rules!</a></p>\",\r\nreferences:\"<b>Configuration Reference:</b>\\n \\\r\n&ltmodule name=\\\"EmptyLineSeparator\\\"&gt\\n \\\r\n  &ltproperty name=\\\"allowMultipleEmptyLines\\\" value=\\\"true\\\"/&gt\\n \\\r\n  &ltproperty name=\\\"allowNoEmptyLineBetweenFields\\\" value=\\\"true\\\"/&gt\\n \\\r\n  &ltproperty name=\\\"tokens\\\" value=\\\"VARIABLE_DEF, CTOR_DEF, METHOD_DEF, CLASS_DEF, STATIC_INIT, INSTANCE_INIT\\\"/&gt\\n \\\r\n  &lt/module&gt\"\r\n        },\r\n          {\r\ntitle: \"For the following Java Coding Standard, generate configurations based on the following Linter Configurations\",\r\ndetail:\"<b> Empty blocks: may be concise:</b>\\n \\\r\n  No static import for classes:\\n \\\r\n  An empty block or block-like construct may be in K & R style. Alternatively, it may be closed immediately after it is opened, with no characters or line break in between ( `{}` ), unless it is part of a multi-block statement (one that directly contains multiple blocks: `if/else` or `try/catch/finally` ).\\n \\\r\nExamples:\\n \\\r\n  // This is acceptable\\n \\\r\n  void doNothing() {}\\n \\\r\n\u000b\\\r\n  // This is equally acceptable\\n \\\r\n  void doNothingElse() {\\n \\\r\n  }\\n \\\r\n\\n \\\r\n<b>Linter Configurations:</b><p><a href=\\\"https://checkstyle.sourceforge.io/checks.html\\\"> Right Click the link and then Click 'Open Link in New Tab' to See All Linter rules!</a></p>\",\r\nreferences:\"<b>Configuration Reference:</b>\\n \\\r\nNone\"\r\n        },\r\n{\r\ntitle: \"For the following Java Coding Standard, generate configurations based on the following Linter Configurations\",\r\ndetail:\"<b> Block indentation: +2 spaces:</b>\\n \\\r\nEach time a new block or block-like construct is opened, the indent increases by two spaces. When the block ends, the indent returns to the previous indent level. The indent level applies to both code and comments throughout the block. \\n \\\r\n\\n \\\r\n<b>Linter Configurations:</b><p><a href=\\\"https://checkstyle.sourceforge.io/checks.html\\\"> Right Click the link and then Click 'Open Link in New Tab' to See All Linter rules!</a></p>\",\r\nreferences:\"<b>Configuration Reference:</b>\\n \\\r\n&ltmodule name=\\\"Indentation\\\"&gt\\n \\\r\n  &ltproperty name=\\\"basicOffset\\\" value=\\\"2\\\"/&gt\\n \\\r\n&lt/module&gt\\n \\\r\n&ltmodule name=\\\"CommentsIndentation\\\"&gt\\n \\\r\n  &ltproperty name=\\\"tokens\\\" value=\\\"SINGLE_LINE_COMMENT, BLOCK_COMMENT_BEGIN\\\"/&gt\\n \\\r\n&lt/module&gt\"\r\n        }\r\n\r\n\r\n      ],\r\n    }\r\n  },\r\n  created() {\r\n    this.createAnswer(this.tupleIndex);\r\n  },\r\n  computed: {\r\n    question() {\r\n      return this.questions[this.questionIndex]\r\n    },\r\n  },\r\n  methods: {\r\n    startTimer() {\r\n      setInterval(() => {\r\n        if (this.seconds > 0) {\r\n          this.seconds--\r\n        } else if (this.minutes > 0) {\r\n          this.minutes--\r\n          this.seconds = 59\r\n        } else {\r\n          // Time is up\r\n          this.ableEdit = false\r\n        }\r\n      }, 1000)\r\n    },\r\n    addQuestion() {\r\n      // Code to add a new question\r\n      this.tupleIndex += 1;\r\n      this.createAnswer(this.tupleIndex);\r\n    },\r\n    createAnswer(index) {\r\n      var answer = {'tuple_id':index};\r\n      this.answers.push(answer);\r\n    },\r\n    resetParameters() {\r\n      this.minutes = 10;\r\n      this.seconds = 0;\r\n      this.tupleIndex = 1;\r\n      this.ableEdit = true;\r\n      this.answers = [];\r\n      this.$refs['reportTuples_1'][0].resetParameters();\r\n      this.createAnswer(this.tupleIndex);\r\n    },\r\n    nextQuestion(){\r\n      console.log(this.$refs)\r\n      for (var i=0;i<this.tupleIndex;i++) {\r\n        this.answers[i]['selectedOption'] = this.$refs['reportTuples_'+(i+1)][0].selectedOption\r\n        this.answers[i]['reason'] = this.$refs['reportTuples_'+(i+1)][0].reason\r\n        this.answers[i]['references'] = this.$refs['reportTuples_'+(i+1)][0].references\r\n      }\r\n      console.log(this.answers)\r\n      this.finalStoredData['answers_'+(this.questionIndex+1)] = {'answers':this.answers, 'min':4-this.minutes,\r\n        'sec':60-this.seconds}\r\n\r\n      if (this.questionIndex < 23) {\r\n        this.questionIndex += 1;\r\n        this.resetParameters()\r\n      } else {\r\n        this.saveAsJSON();\r\n        this.$router.push('/thanks');\r\n      }\r\n    },\r\n    saveAsJSON() {\r\n      const data = JSON.stringify(this.finalStoredData, null, 2);\r\n      const filename = this.$route.params.name + '.json';\r\n      const blob = new Blob([data], { type: 'text/plain;charset=utf-8' });\r\n      saveAs(blob, filename);\r\n    }\r\n\r\n  },\r\n  mounted() {\r\n    this.startTimer();\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.container1 {\r\n  width: 66.67%;\r\n  margin: auto;\r\n}\r\n.container2 {\r\n  width: 90%;\r\n  margin: auto;\r\n  text-align: left;\r\n  font-size: 1.2rem;\r\n}\r\n.question-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n}\r\n.question-title {\r\n  margin-bottom: 1.5rem;\r\n}\r\n.question-detail{\r\nfont-size: 0.8rem;\r\nwidth: 100%;\r\n}\r\n.question-references{\r\nfont-size: 0.8rem;\r\nwidth: 100%;\r\n}\r\n.timer {\r\n  font-size: 1.2rem;\r\n}\r\n.container3 {\r\n  display: flex;\r\n  width: 100%;\r\n  margin-top: 1.5rem;\r\n}\r\n.next-button {\r\n  margin-left: auto;\r\n}\r\n.question-note{\r\nfont-size: 0.8rem;\r\nwidth: 100%;\r\n}\r\n.code {\r\n  display: block;\r\n  white-space: pre-wrap;\r\n  font-size: 0.4rem;\r\n}\r\n</style>"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA,OAAAA,WAAA;AACA,SAAAC,MAAA;AAEA;EACAC,IAAA;EACAC,UAAA;IACAH,WAAA,EAAAA;EACA;EACAI,IAAA,WAAAA,KAAA;IACA;MACAC,aAAA;MACAC,OAAA;MACAC,OAAA;MACAC,UAAA;MACAC,QAAA;MACAC,OAAA;MACAC,eAAA;MACAC,SAAA,GACA;QACAC,KAAA;QACAC,MAAA;AACA;AACA;AACA;AACA;QACAC,UAAA;AACA;MACA,GACA;QACAF,KAAA;QACAC,MAAA;AACA;AACA;AACA;AACA;AACA;QACAC,UAAA;AACA;AACA;AACA;AACA;AACA;MACA,GACA;QACAF,KAAA;QACAC,MAAA;AACA;AACA;AACA;AACA;QACAC,UAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACA,GACA;QACAF,KAAA;QACAC,MAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;QACAC,UAAA;AACA;AACA;AACA;AACA;AACA;MACA,GACA;QACAF,KAAA;QACAC,MAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;QACAC,UAAA;AACA;MACA,GACA;QACAF,KAAA;QACAC,MAAA;AACA;AACA;AACA;QACAC,UAAA;AACA;AACA;AACA;AACA;AACA;AACA;MACA;IAIA;EACA;EACAC,OAAA,WAAAA,QAAA;IACA,KAAAC,YAAA,MAAAT,UAAA;EACA;EACAU,QAAA;IACAC,QAAA,WAAAA,SAAA;MACA,YAAAP,SAAA,MAAAP,aAAA;IACA;EACA;EACAe,OAAA;IACAC,UAAA,WAAAA,WAAA;MAAA,IAAAC,KAAA;MACAC,WAAA;QACA,IAAAD,KAAA,CAAAf,OAAA;UACAe,KAAA,CAAAf,OAAA;QACA,WAAAe,KAAA,CAAAhB,OAAA;UACAgB,KAAA,CAAAhB,OAAA;UACAgB,KAAA,CAAAf,OAAA;QACA;UACA;UACAe,KAAA,CAAAb,QAAA;QACA;MACA;IACA;IACAe,WAAA,WAAAA,YAAA;MACA;MACA,KAAAhB,UAAA;MACA,KAAAS,YAAA,MAAAT,UAAA;IACA;IACAS,YAAA,WAAAA,aAAAQ,KAAA;MACA,IAAAC,MAAA;QAAA,YAAAD;MAAA;MACA,KAAAf,OAAA,CAAAiB,IAAA,CAAAD,MAAA;IACA;IACAE,eAAA,WAAAA,gBAAA;MACA,KAAAtB,OAAA;MACA,KAAAC,OAAA;MACA,KAAAC,UAAA;MACA,KAAAC,QAAA;MACA,KAAAC,OAAA;MACA,KAAAmB,KAAA,sBAAAD,eAAA;MACA,KAAAX,YAAA,MAAAT,UAAA;IACA;IACAsB,YAAA,WAAAA,aAAA;MACAC,OAAA,CAAAC,GAAA,MAAAH,KAAA;MACA,SAAAI,CAAA,MAAAA,CAAA,QAAAzB,UAAA,EAAAyB,CAAA;QACA,KAAAvB,OAAA,CAAAuB,CAAA,2BAAAJ,KAAA,oBAAAI,CAAA,UAAAC,cAAA;QACA,KAAAxB,OAAA,CAAAuB,CAAA,mBAAAJ,KAAA,oBAAAI,CAAA,UAAAE,MAAA;QACA,KAAAzB,OAAA,CAAAuB,CAAA,uBAAAJ,KAAA,oBAAAI,CAAA,UAAAlB,UAAA;MACA;MACAgB,OAAA,CAAAC,GAAA,MAAAtB,OAAA;MACA,KAAAC,eAAA,oBAAAN,aAAA;QAAA,gBAAAK,OAAA;QAAA,gBAAAJ,OAAA;QACA,iBAAAC;MAAA;MAEA,SAAAF,aAAA;QACA,KAAAA,aAAA;QACA,KAAAuB,eAAA;MACA;QACA,KAAAQ,UAAA;QACA,KAAAC,OAAA,CAAAV,IAAA;MACA;IACA;IACAS,UAAA,WAAAA,WAAA;MACA,IAAAhC,IAAA,GAAAkC,IAAA,CAAAC,SAAA,MAAA5B,eAAA;MACA,IAAA6B,QAAA,QAAAC,MAAA,CAAAC,MAAA,CAAAxC,IAAA;MACA,IAAAyC,IAAA,OAAAC,IAAA,EAAAxC,IAAA;QAAAyC,IAAA;MAAA;MACA5C,MAAA,CAAA0C,IAAA,EAAAH,QAAA;IACA;EAEA;EACAM,OAAA,WAAAA,QAAA;IACA,KAAAzB,UAAA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
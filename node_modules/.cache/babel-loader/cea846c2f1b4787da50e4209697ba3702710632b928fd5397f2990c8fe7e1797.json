{"ast":null,"code":"import \"core-js/modules/web.timers.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.json.stringify.js\";\nimport \"core-js/modules/es.function.name.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport ReportTuple from './ReportTuple.vue';\nimport { saveAs } from 'file-saver';\nexport default {\n  name: \"Demo\",\n  components: {\n    ReportTuple: ReportTuple\n  },\n  data: function data() {\n    return {\n      questionIndex: 0,\n      minutes: 5,\n      seconds: 0,\n      tupleIndex: 1,\n      ableEdit: true,\n      answers: [],\n      finalStoredData: {},\n      questions: [{\n        title: 'Please compare the products: <b>amd processor</b> vs <b>intel processor</b>',\n        options: ['amd processor is better', 'intel processor is better', 'they are equal', 'hard to say']\n      }]\n    };\n  },\n  created: function created() {\n    this.createAnswer(this.tupleIndex);\n  },\n  computed: {\n    question: function question() {\n      return this.questions[this.questionIndex];\n    }\n  },\n  methods: {\n    startTimer: function startTimer() {\n      var _this = this;\n      setInterval(function () {\n        if (_this.seconds > 0) {\n          _this.seconds--;\n        } else if (_this.minutes > 0) {\n          _this.minutes--;\n          _this.seconds = 59;\n        } else {\n          // Time is up\n          _this.ableEdit = false;\n        }\n      }, 1000);\n    },\n    addQuestion: function addQuestion() {\n      // Code to add a new question\n      this.tupleIndex += 1;\n      this.createAnswer(this.tupleIndex);\n    },\n    createAnswer: function createAnswer(index) {\n      var answer = {\n        'tuple_id': index\n      };\n      this.answers.push(answer);\n    },\n    resetParameters: function resetParameters() {\n      this.minutes = 5;\n      this.seconds = 0;\n      this.tupleIndex = 1;\n      this.ableEdit = true;\n      this.answers = [];\n      this.$refs['reportTuples_1'][0].resetParameters();\n      this.createAnswer(this.tupleIndex);\n    },\n    nextQuestion: function nextQuestion() {\n      console.log(this.$refs);\n      for (var i = 0; i < this.tupleIndex; i++) {\n        this.answers[i]['selectedOption'] = this.$refs['reportTuples_' + (i + 1)][0].selectedOption;\n        this.answers[i]['reason'] = this.$refs['reportTuples_' + (i + 1)][0].reason;\n        this.answers[i]['references'] = this.$refs['reportTuples_' + (i + 1)][0].references;\n      }\n      console.log(this.answers);\n      this.finalStoredData['answers_' + (this.questionIndex + 1)] = {\n        'answers': this.answers,\n        'min': 9 - this.minutes,\n        'sec': 60 - this.seconds\n      };\n      this.saveAsJSON();\n      this.$router.push('/thanks');\n    },\n    saveAsJSON: function saveAsJSON() {\n      var data = JSON.stringify(this.finalStoredData, null, 2);\n      var filename = this.$route.params.name + '.json';\n      var blob = new Blob([data], {\n        type: 'text/plain;charset=utf-8'\n      });\n      saveAs(blob, filename);\n    }\n  },\n  mounted: function mounted() {\n    this.startTimer();\n  }\n};","map":{"version":3,"names":["ReportTuple","saveAs","name","components","data","questionIndex","minutes","seconds","tupleIndex","ableEdit","answers","finalStoredData","questions","title","options","created","createAnswer","computed","question","methods","startTimer","_this","setInterval","addQuestion","index","answer","push","resetParameters","$refs","nextQuestion","console","log","i","selectedOption","reason","references","saveAsJSON","$router","JSON","stringify","filename","$route","params","blob","Blob","type","mounted"],"sources":["src/components/Demo.vue"],"sourcesContent":["<template>\r\n  <div class=\"container1\">\r\n    <div class=\"question-header\">\r\n      <h2>{{ `Question ${questionIndex + 1}:` }}</h2>\r\n      <div class=\"timer\">{{ `Time: ${minutes}:${seconds}` }}</div>\r\n    </div>\r\n    <div class=\"container2\">\r\n      <p class=\"question-title\" v-html=\"question.title\"></p>\r\n      <div v-for=\"index in tupleIndex\" >\r\n        <ReportTuple :question=\"question\" :able-edit=\"ableEdit\" :key=\"index\" :name=\"index\" :ref=\"'reportTuples_'+index\"/>\r\n        <hr>\r\n      </div>\r\n      <button @click=\"addQuestion\" :disabled=\"!ableEdit\">+</button>\r\n    </div>\r\n    <div class=\"container3\">\r\n      <button @click=\"nextQuestion\" class=\"next-button\">Next</button>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport ReportTuple from './ReportTuple.vue'\r\nimport { saveAs } from 'file-saver';\r\n\r\nexport default {\r\n  name: \"Demo\",\r\n  components: {\r\n    ReportTuple\r\n  },\r\n  data() {\r\n    return {\r\n      questionIndex: 0,\r\n      minutes: 5,\r\n      seconds: 0,\r\n      tupleIndex: 1,\r\n      ableEdit: true,\r\n      answers: [],\r\n      finalStoredData:{},\r\n      questions: [\r\n        {\r\n          title: 'Please compare the products: <b>amd processor</b> vs <b>intel processor</b>',\r\n          options: ['amd processor is better', 'intel processor is better', 'they are equal', 'hard to say']\r\n        },\r\n      ],\r\n    }\r\n  },\r\n  created() {\r\n    this.createAnswer(this.tupleIndex);\r\n  },\r\n  computed: {\r\n    question() {\r\n      return this.questions[this.questionIndex]\r\n    },\r\n  },\r\n  methods: {\r\n    startTimer() {\r\n      setInterval(() => {\r\n        if (this.seconds > 0) {\r\n          this.seconds--\r\n        } else if (this.minutes > 0) {\r\n          this.minutes--\r\n          this.seconds = 59\r\n        } else {\r\n          // Time is up\r\n          this.ableEdit = false\r\n        }\r\n      }, 1000)\r\n    },\r\n    addQuestion() {\r\n      // Code to add a new question\r\n      this.tupleIndex += 1;\r\n      this.createAnswer(this.tupleIndex);\r\n    },\r\n    createAnswer(index) {\r\n      var answer = {'tuple_id':index};\r\n      this.answers.push(answer);\r\n    },\r\n    resetParameters() {\r\n      this.minutes = 5;\r\n      this.seconds = 0;\r\n      this.tupleIndex = 1;\r\n      this.ableEdit = true;\r\n      this.answers = [];\r\n      this.$refs['reportTuples_1'][0].resetParameters();\r\n      this.createAnswer(this.tupleIndex);\r\n    },\r\n    nextQuestion(){\r\n      console.log(this.$refs)\r\n      for (var i=0;i<this.tupleIndex;i++) {\r\n        this.answers[i]['selectedOption'] = this.$refs['reportTuples_'+(i+1)][0].selectedOption\r\n        this.answers[i]['reason'] = this.$refs['reportTuples_'+(i+1)][0].reason\r\n        this.answers[i]['references'] = this.$refs['reportTuples_'+(i+1)][0].references\r\n      }\r\n      console.log(this.answers)\r\n      this.finalStoredData['answers_'+(this.questionIndex+1)] = {'answers':this.answers, 'min':9-this.minutes,\r\n        'sec':60-this.seconds}\r\n\r\n      this.saveAsJSON();\r\n      this.$router.push('/thanks');\r\n\r\n    },\r\n    saveAsJSON() {\r\n      const data = JSON.stringify(this.finalStoredData, null, 2);\r\n      const filename = this.$route.params.name + '.json';\r\n      const blob = new Blob([data], { type: 'text/plain;charset=utf-8' });\r\n      saveAs(blob, filename);\r\n    }\r\n\r\n  },\r\n  mounted() {\r\n    this.startTimer();\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.container1 {\r\n  width: 66.67%;\r\n  margin: auto;\r\n}\r\n.container2 {\r\n  width: 90%;\r\n  margin: auto;\r\n  text-align: left;\r\n  font-size: 1.2rem;\r\n}\r\n.question-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n}\r\n.question-title {\r\n  margin-bottom: 1.5rem;\r\n}\r\n.timer {\r\n  font-size: 1.2rem;\r\n}\r\n.container3 {\r\n  display: flex;\r\n  width: 100%;\r\n  margin-top: 1.5rem;\r\n}\r\n.next-button {\r\n  margin-left: auto;\r\n}\r\n</style>"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAqBA,OAAAA,WAAA;AACA,SAAAC,MAAA;AAEA;EACAC,IAAA;EACAC,UAAA;IACAH,WAAA,EAAAA;EACA;EACAI,IAAA,WAAAA,KAAA;IACA;MACAC,aAAA;MACAC,OAAA;MACAC,OAAA;MACAC,UAAA;MACAC,QAAA;MACAC,OAAA;MACAC,eAAA;MACAC,SAAA,GACA;QACAC,KAAA;QACAC,OAAA;MACA;IAEA;EACA;EACAC,OAAA,WAAAA,QAAA;IACA,KAAAC,YAAA,MAAAR,UAAA;EACA;EACAS,QAAA;IACAC,QAAA,WAAAA,SAAA;MACA,YAAAN,SAAA,MAAAP,aAAA;IACA;EACA;EACAc,OAAA;IACAC,UAAA,WAAAA,WAAA;MAAA,IAAAC,KAAA;MACAC,WAAA;QACA,IAAAD,KAAA,CAAAd,OAAA;UACAc,KAAA,CAAAd,OAAA;QACA,WAAAc,KAAA,CAAAf,OAAA;UACAe,KAAA,CAAAf,OAAA;UACAe,KAAA,CAAAd,OAAA;QACA;UACA;UACAc,KAAA,CAAAZ,QAAA;QACA;MACA;IACA;IACAc,WAAA,WAAAA,YAAA;MACA;MACA,KAAAf,UAAA;MACA,KAAAQ,YAAA,MAAAR,UAAA;IACA;IACAQ,YAAA,WAAAA,aAAAQ,KAAA;MACA,IAAAC,MAAA;QAAA,YAAAD;MAAA;MACA,KAAAd,OAAA,CAAAgB,IAAA,CAAAD,MAAA;IACA;IACAE,eAAA,WAAAA,gBAAA;MACA,KAAArB,OAAA;MACA,KAAAC,OAAA;MACA,KAAAC,UAAA;MACA,KAAAC,QAAA;MACA,KAAAC,OAAA;MACA,KAAAkB,KAAA,sBAAAD,eAAA;MACA,KAAAX,YAAA,MAAAR,UAAA;IACA;IACAqB,YAAA,WAAAA,aAAA;MACAC,OAAA,CAAAC,GAAA,MAAAH,KAAA;MACA,SAAAI,CAAA,MAAAA,CAAA,QAAAxB,UAAA,EAAAwB,CAAA;QACA,KAAAtB,OAAA,CAAAsB,CAAA,2BAAAJ,KAAA,oBAAAI,CAAA,UAAAC,cAAA;QACA,KAAAvB,OAAA,CAAAsB,CAAA,mBAAAJ,KAAA,oBAAAI,CAAA,UAAAE,MAAA;QACA,KAAAxB,OAAA,CAAAsB,CAAA,uBAAAJ,KAAA,oBAAAI,CAAA,UAAAG,UAAA;MACA;MACAL,OAAA,CAAAC,GAAA,MAAArB,OAAA;MACA,KAAAC,eAAA,oBAAAN,aAAA;QAAA,gBAAAK,OAAA;QAAA,gBAAAJ,OAAA;QACA,iBAAAC;MAAA;MAEA,KAAA6B,UAAA;MACA,KAAAC,OAAA,CAAAX,IAAA;IAEA;IACAU,UAAA,WAAAA,WAAA;MACA,IAAAhC,IAAA,GAAAkC,IAAA,CAAAC,SAAA,MAAA5B,eAAA;MACA,IAAA6B,QAAA,QAAAC,MAAA,CAAAC,MAAA,CAAAxC,IAAA;MACA,IAAAyC,IAAA,OAAAC,IAAA,EAAAxC,IAAA;QAAAyC,IAAA;MAAA;MACA5C,MAAA,CAAA0C,IAAA,EAAAH,QAAA;IACA;EAEA;EACAM,OAAA,WAAAA,QAAA;IACA,KAAA1B,UAAA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}